AWSTemplateFormatVersion: "2010-09-09"
Description: 'raisetech sample app by CloudFormation'

#-------------------------------------------------------------
# Parameters
#-------------------------------------------------------------
Parameters: 
  Namebase:
    Description: base name
    Type: String
    Default: raisetech-demo

  Ec2ImageId:
    Description: AL2 Kernel 5.10 x86_64
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2

  MyIP:
    Description: SSH接続のためインバウンドルールに追加
    Type: String
    Default: xxx.xxx.xxx.xxx


#------------------------------------------------------------
# VPC
#------------------------------------------------------------
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.16.1.0/24
      Tags:
        - Key: Name
          Value: !Sub VPC-${Namebase}
        - Key: Raise
          Value: !Sub VPC-${Namebase}

# Subnet ---------------------------------------------------
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.1.0/26
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub PublicSubnet1-${Namebase}

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.1.64/26
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      
      Tags:
        - Key: Name
          Value: !Sub PublicSubnet2-${Namebase}
        
  
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.1.128/26
      AvailabilityZone: !Select 
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub PrivateSubnet1-${Namebase}

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 172.16.1.192/26
      AvailabilityZone: !Select 
        - 1
        - Fn::GetAZs: !Ref AWS::Region
      Tags:
        - Key: Name
          Value: !Sub PrivateSubnet2-${Namebase}

# Internet Gateway ------------------------------------------
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub InternetGateway-${Namebase}
  
  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId : !Ref InternetGateway
      VpcId: !Ref MyVPC

# Route Table ----------------------------------------------
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
      Tags:
        - Key: Name
          Value: !Sub PublicRT-${Namebase}

  PublcRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  

#------------------------------------------------------------
# EC2
#------------------------------------------------------------

# Key Pair --------------------------------------------------
  KeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: KeyPair20230612
  
# Security Group --------------------------------------------
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub EC2-SG-${Namebase}
      GroupDescription: "Security Group for EC2"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Sub ${MyIP}/32
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub EC2-SG-${Namebase}

# Instance -------------------------------------------------
  EC2Instance1:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPair
      DisableApiTermination: false
      ImageId: !Ref Ec2ImageId
      InstanceType: t2.micro
      Monitoring: false
      IamInstanceProfile: !Ref MyIncetanceProfile
      NetworkInterfaces:
        - DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          AssociatePublicIpAddress: true
          GroupSet:
               - !Ref EC2SecurityGroup
      BlockDeviceMappings:
           - DeviceName: /dev/xvda
             Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
      UserData: !Base64 |
        #!/bin/bash -ex
        yum update -y
        yum install -y git
        amazon-linux-extras install -y nginx1
        systemctl start nginx
      Tags:
        - Key: Name
          Value: !Sub EC2Instance1-${Namebase}
        - Key: Raise
          Value: !Sub EC2Instance1-${Namebase}
      
  EC2Instance2:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyPair
      DisableApiTermination: false
      ImageId: !Ref Ec2ImageId
      InstanceType: t2.micro
      Monitoring: false
      IamInstanceProfile: !Ref MyIncetanceProfile
      NetworkInterfaces:
        - DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet2
          AssociatePublicIpAddress: true
          GroupSet:
               - !Ref EC2SecurityGroup
      BlockDeviceMappings:
           - DeviceName: /dev/xvda
             Ebs:
              VolumeSize: 8
              VolumeType: gp2
              DeleteOnTermination: true
      UserData: !Base64 |
        #!/bin/bash -ex
        yum update -y
        yum -y install git
        amazon-linux-extras install -y nginx1
        systemctl start nginx
      Tags:
        - Key: Name
          Value: !Sub EC2Instance2-${Namebase}
        - Key: Raise
          Value: !Sub EC2Instance2-${Namebase}
  
# IncetanceProfile
  MyIncetanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: "/"
      Roles:
      - !ImportValue EC2Role

#---------------------------------------------------------
# RDS
#---------------------------------------------------------
# RDS Security Group -------------------------------------
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub RDS-SG-${Namebase}
      GroupDescription: "Security Group for RDS"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub RDS-SG-${Namebase}

# RDS Subnet Group ---------------------------------------
  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties: 
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:  
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      DBSubnetGroupName: RDSSubnetGroup
      Tags: 
        - Key: Name
          Value: !Sub RDS-SubnetGroup-${Namebase}

# DB Instance --------------------------------------------
  DBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      MaxAllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref AWS::Region
      BackupRetentionPeriod: 7
      DBInstanceIdentifier: !Sub DB-${Namebase}
      DBName: demodb
      VPCSecurityGroups: 
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSSubnetGroup
      Engine: mysql
      EngineVersion: 8.0.32
      MasterUsername: admin
      ManageMasterUserPassword: true
      MultiAZ: false
      PreferredBackupWindow: 18:00-21:00
      PubliclyAccessible: false
      StorageEncrypted: true
      StorageType: gp2
      Tags:
        - Key: Name
          Value: !Sub RDS-${Namebase}
        - Key: Raise
          Value: !Sub RDS-${Namebase}

#---------------------------------------------------------
# ELB
#---------------------------------------------------------
# ELB Security Group -------------------------------------
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ELB-SG-${Namebase}
      GroupDescription: "Security Group for ELB"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub RDS-SG-${Namebase} 

# Target Group -------------------------------------------
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 5
      IpAddressType: ipv4
      Matcher: 
        HttpCode: 200-299
      Name: !Sub ALB-TG-${Namebase}
      Port: 80
      Protocol: HTTP
      ProtocolVersion: HTTP1
      Tags: 
        - Key: Name
          Value: !Sub ALB-TG-${Namebase}
        - Key: Raise
          Value: !Sub ALB-TG-${Namebase}
      TargetGroupAttributes: 
        - Key: deregistration_delay.timeout_seconds
          Value: 300
        - Key: stickiness.enabled
          Value: false
      Targets: 
        - Id: !Ref EC2Instance1
          Port: 80
        - Id: !Ref EC2Instance2
          Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId: !Ref MyVPC

# Listener ------------------------------------------------
  ELBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref TargetGroup 
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP

# Elastic Load Balancer -----------------------------------
  ELB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
# 属性設定     LoadBalancerAttributes:
      Name: !Sub ELB-${Namebase}
      Scheme: internet-facing
      SecurityGroups: 
        - !Ref ELBSecurityGroup
# for EIP      SubnetMappings: 
      Subnets: 
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags: 
        - Key: Name
          Value: !Sub ALB-${Namebase}
        - Key: Raise
          Value: !Sub ALB-${Namebase}
      Type: application

#---------------------------------------------------------
# S3
#---------------------------------------------------------
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub s3-sucket-${Namebase}
      AccessControl: Private
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
